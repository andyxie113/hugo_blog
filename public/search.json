[{"categories":["centos7","gcc","scl"],"content":"​\tCentos7 gcc版本默认4.8.3，Red Hat 为了软件的稳定和版本支持，yum 上版本也是4.8.3，所以无法使用yum进行软件更新，所以使用scl。\n​\tscl软件集(Software Collections),是为了给 RHEL/CentOS 用户提供一种以方便、安全地安装和使用应用程序和运行时环境的多个（而且可能是更新的）版本的方式，同时避免把系统搞乱。\n使用scl升级gcc步骤：\n1.安装scl源：\n1  yum install centos-release-scl scl-utils-build   2.列出scl有哪些源可以用\n1  yum list all --enablerepo='centos-sclo-rh'   3.安装5.3版本的gcc、gcc-c++、gdb\n1  yum install devtoolset-4-gcc.x86_64 devtoolset-4-gcc-c++.x86_64 devtoolset-4-gcc-gdb-plugin.x86_64   4.查看从 SCL 中安装的包的列表：\n1  scl --list 或 scl -l   5.切换版本\n1  scl enable devtoolset-4 bash   6.使用exit 退出当前scl版本的bash环境\n1 2 3 4 5  scl --list 或scl -l scl --help 或 scl -h scl enable \u003cscl-package-name\u003e \u003ccommand\u003e #使用scl来执行command命令 scl enable devtoolset-4 bash #使用scl创建一个scl包的bash会话环境 exit #退出当前scl bash环境，恢复成系统bash环境   ","description":"CentOS7升级gcc版本–使用scl软件集","tags":["centos7","gcc","scl"],"title":"CentOS7升级gcc版本","uri":"/posts/centos7%E5%8D%87%E7%BA%A7gcc%E7%89%88%E6%9C%AC--%E4%BD%BF%E7%94%A8scl%E8%BD%AF%E4%BB%B6%E9%9B%86/"},{"categories":["centos7","zabbix_agent","安装"],"content":"1.把zabbix.tar.gz包上传/opt目录下解压,上传agent包至zabbix目录下并修改配置\n1 2 3 4 5 6 7  cd /opt rz zabbix.tar.gz tar xvf zabbix.tar.gz \u0026\u0026 rm zabbix.tar.gz cd zabbix/ rz zabbix_agent-5.0.15-linux-3.0-amd64-static.tar.gz tar zxvf zabbix_agent-5.0.15-linux-3.0-amd64-static.tar.gz \u0026\u0026 rm zabbix_agent-5.0.15-linux-3.0-amd64-static.tar.gz rm -rf conf/   2.创建Zabbix用户及日志目录\n1 2 3 4 5  chattr -i /etc/{passwd,group,gshadow,shadow} useradd -s /sbin/nologin -u 550 -c \"zabbix agentd\" zabbix chattr +i /etc/{passwd,group,gshadow,shadow} mkdir -p /opt/zabbix chown -R zabbix.zabbix /opt/zabbix   3.配置zabbix_agentd.conf，以下是配置完成后的内容：\n1 2 3 4 5 6 7 8  egrep -v “(#|$)” /opt/zabbix/etc/zabbix_agentd.conf PidFile=/opt/zabbix/log/zabbix_agentd.pid LogFile=/opt/zabbix/log/zabbix_agentd.log EnableRemoteCommands=1 Server=0.0.0.0 ListenPort=10050 Hostname=localhost Include=/opt/zabbix/etc/zabbix_agentd.conf.d/   4.创建systemctl系统zabbix_agent 单元文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  [Unit] Description=Zabbix Agent After=syslog.target After=network.target [Service] Environment=\"CONFFILE=/opt/zabbix/etc/zabbix_agentd.conf\" Type=forking Restart=on-failure PIDFile=/opt/zabbix/log/zabbix_agentd.pid KillMode=control-group ExecStart=/opt/zabbix/sbin/zabbix_agentd -c $CONFFILE ExecStop=/bin/kill -SIGTERM $MAINPID RestartSec=10s [Install] WantedBy=multi-user.target   5.启动 Zabbix Agentd 客户端服务\n1  systemctl start zabbix-agent.service   ","description":"zabbix_agent安装","tags":["centos7","zabbix_agent","安装"],"title":"zabbix_agent安装","uri":"/posts/zabbix_agent%E5%AE%89%E8%A3%85/"},{"categories":["dockerfile","openresty"],"content":"编写Dockerfile文件，依据GitHub基础创建文件进行修改。 https://github.com/openresty/docker-openresty https://gitee.com/cuiyili/openresty/blob/master/Dockerfile\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168  # Dockerfile - alpine # https://github.com/openresty/docker-openresty ARG RESTY_IMAGE_BASE=\"alpine\" ARG RESTY_IMAGE_TAG=\"3.14\" FROM ${RESTY_IMAGE_BASE}:${RESTY_IMAGE_TAG} LABEL maintainer=\"Evan Wies \u003cevan@neomantra.net\u003e\" # Docker Build Arguments ARG RESTY_IMAGE_BASE=\"alpine\" ARG RESTY_IMAGE_TAG=\"3.14\" ARG RESTY_VERSION=\"1.19.9.1\" ARG RESTY_OPENSSL_VERSION=\"1.1.1k\" ARG RESTY_OPENSSL_PATCH_VERSION=\"1.1.1f\" ARG RESTY_OPENSSL_URL_BASE=\"https://www.openssl.org/source\" ARG RESTY_PCRE_VERSION=\"8.44\" ARG RESTY_J=\"1\" ARG RESTY_CONFIG_OPTIONS=\"\\ --with-compat \\ --with-file-aio \\ --with-http_addition_module \\ --with-http_auth_request_module \\ --with-http_dav_module \\ --with-http_flv_module \\ --with-http_geoip_module=dynamic \\ --with-http_gunzip_module \\ --with-http_gzip_static_module \\ --with-http_image_filter_module=dynamic \\ --with-http_mp4_module \\ --with-http_random_index_module \\ --with-http_realip_module \\ --with-http_secure_link_module \\ --with-http_slice_module \\ --with-http_ssl_module \\ --with-http_stub_status_module \\ --with-http_sub_module \\ --with-http_v2_module \\ --with-http_xslt_module=dynamic \\ --with-ipv6 \\ --with-mail \\ --with-mail_ssl_module \\ --with-md5-asm \\ --with-pcre-jit \\ --with-sha1-asm \\ --with-stream \\ --with-stream_ssl_module \\ --with-threads \\ # 增加编译模块 --add-module=/usr/local/src/ngx_http_proxy_connect_module \\ \" ARG RESTY_CONFIG_OPTIONS_MORE=\"\" ARG RESTY_LUAJIT_OPTIONS=\"--with-luajit-xcflags='-DLUAJIT_NUMMODE=2 -DLUAJIT_ENABLE_LUA52COMPAT'\" ARG RESTY_ADD_PACKAGE_BUILDDEPS=\"\" ARG RESTY_ADD_PACKAGE_RUNDEPS=\"\" ARG RESTY_EVAL_PRE_CONFIGURE=\"\" ARG RESTY_EVAL_POST_MAKE=\"\" # These are not intended to be user-specified ARG _RESTY_CONFIG_DEPS=\"--with-pcre \\ --with-cc-opt='-DNGX_LUA_ABORT_AT_PANIC -I/usr/local/openresty/pcre/include -I/usr/local/openresty/openssl/include' \\ --with-ld-opt='-L/usr/local/openresty/pcre/lib -L/usr/local/openresty/openssl/lib -Wl,-rpath,/usr/local/openresty/pcre/lib:/usr/local/openresty/openssl/lib' \\ \" LABEL resty_image_base=\"${RESTY_IMAGE_BASE}\" LABEL resty_image_tag=\"${RESTY_IMAGE_TAG}\" LABEL resty_version=\"${RESTY_VERSION}\" LABEL resty_openssl_version=\"${RESTY_OPENSSL_VERSION}\" LABEL resty_openssl_patch_version=\"${RESTY_OPENSSL_PATCH_VERSION}\" LABEL resty_openssl_url_base=\"${RESTY_OPENSSL_URL_BASE}\" LABEL resty_pcre_version=\"${RESTY_PCRE_VERSION}\" LABEL resty_config_options=\"${RESTY_CONFIG_OPTIONS}\" LABEL resty_config_options_more=\"${RESTY_CONFIG_OPTIONS_MORE}\" LABEL resty_config_deps=\"${_RESTY_CONFIG_DEPS}\" LABEL resty_add_package_builddeps=\"${RESTY_ADD_PACKAGE_BUILDDEPS}\" LABEL resty_add_package_rundeps=\"${RESTY_ADD_PACKAGE_RUNDEPS}\" LABEL resty_eval_pre_configure=\"${RESTY_EVAL_PRE_CONFIGURE}\" LABEL resty_eval_post_make=\"${RESTY_EVAL_POST_MAKE}\" RUN mkdir -p /usr/local/src/ \u0026\u0026 wget http://dlsw.91donkey.com/software/source/nginx/ngx_http_proxy_connect_module.tgz \u0026\u0026 tar zxf ngx_http_proxy_connect_module.tgz -C /usr/local/src/ RUN apk add --no-cache --virtual .build-deps \\  build-base \\  coreutils \\  curl \\  gd-dev \\  geoip-dev \\  libxslt-dev \\  linux-headers \\  make \\  perl-dev \\  readline-dev \\  zlib-dev \\  ${RESTY_ADD_PACKAGE_BUILDDEPS} \\  \u0026\u0026 apk add --no-cache \\  gd \\  geoip \\  libgcc \\  libxslt \\  zlib \\  ${RESTY_ADD_PACKAGE_RUNDEPS} \\  \u0026\u0026 cd /tmp \\  \u0026\u0026 if [ -n \"${RESTY_EVAL_PRE_CONFIGURE}\" ]; then eval $(echo ${RESTY_EVAL_PRE_CONFIGURE}); fi \\  \u0026\u0026 cd /tmp \\  \u0026\u0026 curl -fSL \"${RESTY_OPENSSL_URL_BASE}/openssl-${RESTY_OPENSSL_VERSION}.tar.gz\" -o openssl-${RESTY_OPENSSL_VERSION}.tar.gz \\  \u0026\u0026 tar xzf openssl-${RESTY_OPENSSL_VERSION}.tar.gz \\  \u0026\u0026 cd openssl-${RESTY_OPENSSL_VERSION} \\  \u0026\u0026 if [ $(echo ${RESTY_OPENSSL_VERSION} | cut -c 1-5) = \"1.1.1\" ] ; then \\  echo 'patching OpenSSL 1.1.1 for OpenResty' \\  \u0026\u0026 curl -s https://raw.githubusercontent.com/openresty/openresty/master/patches/openssl-${RESTY_OPENSSL_PATCH_VERSION}-sess_set_get_cb_yield.patch | patch -p1 ; \\  fi \\  \u0026\u0026 if [ $(echo ${RESTY_OPENSSL_VERSION} | cut -c 1-5) = \"1.1.0\" ] ; then \\  echo 'patching OpenSSL 1.1.0 for OpenResty' \\  \u0026\u0026 curl -s https://raw.githubusercontent.com/openresty/openresty/ed328977028c3ec3033bc25873ee360056e247cd/patches/openssl-1.1.0j-parallel_build_fix.patch | patch -p1 \\  \u0026\u0026 curl -s https://raw.githubusercontent.com/openresty/openresty/master/patches/openssl-${RESTY_OPENSSL_PATCH_VERSION}-sess_set_get_cb_yield.patch | patch -p1 ; \\  fi \\  \u0026\u0026 ./config \\  no-threads shared zlib -g \\  enable-ssl3 enable-ssl3-method \\  --prefix=/usr/local/openresty/openssl \\  --libdir=lib \\  -Wl,-rpath,/usr/local/openresty/openssl/lib \\  \u0026\u0026 make -j${RESTY_J} \\  \u0026\u0026 make -j${RESTY_J} install_sw \\  \u0026\u0026 cd /tmp \\  \u0026\u0026 curl -fSL https://ftp.pcre.org/pub/pcre/pcre-${RESTY_PCRE_VERSION}.tar.gz -o pcre-${RESTY_PCRE_VERSION}.tar.gz \\  \u0026\u0026 tar xzf pcre-${RESTY_PCRE_VERSION}.tar.gz \\  \u0026\u0026 cd /tmp/pcre-${RESTY_PCRE_VERSION} \\  \u0026\u0026 ./configure \\  --prefix=/usr/local/openresty/pcre \\  --disable-cpp \\  --enable-jit \\  --enable-utf \\  --enable-unicode-properties \\  \u0026\u0026 make -j${RESTY_J} \\  \u0026\u0026 make -j${RESTY_J} install \\  \u0026\u0026 cd /tmp \\  \u0026\u0026 curl -fSL https://openresty.org/download/openresty-${RESTY_VERSION}.tar.gz -o openresty-${RESTY_VERSION}.tar.gz \\  \u0026\u0026 tar xzf openresty-${RESTY_VERSION}.tar.gz \\  \u0026\u0026 cd /tmp/openresty-${RESTY_VERSION} \\  \u0026\u0026 eval ./configure -j${RESTY_J} ${_RESTY_CONFIG_DEPS} ${RESTY_CONFIG_OPTIONS} ${RESTY_CONFIG_OPTIONS_MORE} ${RESTY_LUAJIT_OPTIONS} \\  \u0026\u0026 make -j${RESTY_J} \\  \u0026\u0026 make -j${RESTY_J} install \\  \u0026\u0026 cd /tmp \\  \u0026\u0026 if [ -n \"${RESTY_EVAL_POST_MAKE}\" ]; then eval $(echo ${RESTY_EVAL_POST_MAKE}); fi \\  \u0026\u0026 rm -rf \\  openssl-${RESTY_OPENSSL_VERSION}.tar.gz openssl-${RESTY_OPENSSL_VERSION} \\  pcre-${RESTY_PCRE_VERSION}.tar.gz pcre-${RESTY_PCRE_VERSION} \\  openresty-${RESTY_VERSION}.tar.gz openresty-${RESTY_VERSION} \\  \u0026\u0026 apk del .build-deps \\  \u0026\u0026 mkdir -p /var/run/openresty \\  \u0026\u0026 ln -sf /dev/stdout /usr/local/openresty/nginx/logs/access.log \\  \u0026\u0026 ln -sf /dev/stderr /usr/local/openresty/nginx/logs/error.log # Add additional binaries into PATH for convenience ENV PATH=$PATH:/usr/local/openresty/luajit/bin:/usr/local/openresty/nginx/sbin:/usr/local/openresty/bin # Copy nginx configuration files COPY nginx.conf /usr/local/openresty/nginx/conf/nginx.conf COPY nginx.vh.default.conf /etc/nginx/conf.d/default.conf CMD [\"/usr/local/openresty/bin/openresty\", \"-g\", \"daemon off;\"] # Use SIGQUIT instead of default SIGTERM to cleanly drain requests # See https://github.com/openresty/docker-openresty/blob/master/README.md#tips--pitfalls STOPSIGNAL SIGQUIT   ","description":"构建openresry镜像","tags":["dockerfile","openresty"],"title":"构建openresry镜像","uri":"/posts/%E6%9E%84%E5%BB%BAopenresty%E9%95%9C%E5%83%8F%E5%B9%B6%E5%AE%89%E8%A3%85ngx_http_dyups_module%E6%A8%A1%E5%9D%97/"},{"categories":["centos7","minio","安装"],"content":"#获取minio https://dl.min.io/server/minio/release/linux-amd64/minio\n#创建目录\n 数据存储目录 配置文件目录 启动脚本及二进制文件目录  1 2  mkdir -p /opt/minio mkdir -p /opt/minio/{etc,data,run}   将 minio 二进制文件上传到 /opt/minio/run 目录 默认的配置目录是 ${HOME}/.minio，可以使用–config-dir命令行选项重写之。MinIO server在首次启动时会生成一个新的config.json，里面带有自动生成的访问凭据\n#启动设置 minio的 参数 最后面的就是数据目录位置 注意 密码一旦设置了，就不可以修改了，如果修改，导致目录不可以访问。\n1 2 3 4 5 6 7 8  vim /opt/minio/run/run.sh #!/bin/bash export MINIO_ACCESS_KEY=minio export MINIO_SECRET_KEY=***************** /opt/minio/run/minio server --config-dir /opt/minio/etc \\ --console-address \":9999\" \\ /opt/minio/data   #服务设置\n WorkingDirectory：二进制文件目录 ExecStart：指定集群启动脚本  /usr/lib/systemd/system 所有服务都放在其下\n1 2 3 4 5 6 7 8 9 10 11 12 13  vim /usr/lib/systemd/system/minio.service [Unit] Description=Minio service Documentation=https://docs.minio.io/ [Service] WorkingDirectory=/opt/minio/run/ ExecStart=/opt/minio/run/run.sh Restart=on-failure RestartSec=5 [Install] WantedBy=multi-user.target   #启停服务\n1 2 3 4 5  systemctl enable minio.service systemctl daemon-reload systemctl start minio systemctl status minio.service systemctl stop minio   #权限修改\n service文件 二进制文件 集群启动脚本  #启动\n1 2  systemctl daemon-reload systemctl enable minio \u0026\u0026 systemctl start minio   ","description":"CentOS7安装MinIO单机版","tags":["centos7","minio","安装"],"title":"CentOS7安装MinIO单机版","uri":"/posts/minio%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2/"},{"categories":["minio","mc","minIO client"],"content":"​\tMinIO客户端mc命令行工具提供了一种现代的替代UNIX命令， 如 ls、cat、cp、mirror和diff支持文件系统和兼容Amazon S3 的云存储服务（AWS Signature v2和v4）。 基本语法格式：\n1  mc [FLAGS] COMMAND [ARGUMENTS...] [COMMAND FLAGS | -h]   快速安装 Linux环境： ​\t添加一个 temporary 扩展 用于运行 mc 实用程序的 PATH。或者，执行 mc 通过导航到父文件夹和 运行 ./mc –help\n1 2 3 4 5 6 7 8  curl https://dl.minio.org.cn/client/mc/release/linux-amd64/mc \\  --create-dirs \\  -o $HOME/minio-binaries/mc chmod +x $HOME/minio-binaries/mc export PATH=$PATH:$HOME/minio-binaries/ mc --help   初始化配置 ​\t使用 mc alias set 添加 Amazon S3 兼容服务的命令 到 mc configuration. egs:\n1 2 3 4 5 6 7 8  MinIO Server： mc alias set myminio https://minioserver.example.net ACCESS_KEY SECRET KEY AWS S3: mc alias set myS3 https://s3.amazon.com/endpoint ACCESS_KEY SECRET KEY Google Cloud Storage: mc alias set myGCS https://storage.googleapis.com/endpoint ACCESS_KEY SECRET KEY   ​\tmc使用json格式的配置文件，默认路径：~/.mc/config.json,可以使用–config-dir指定配置文件\n测试连接 1  mc admin info myminio   如果成功，该命令将返回有关 S3 服务的信息。 如果不成功，请检查以下各项:\n 指定的 ACCESSKEY 和 SECRETKEY是否有S3服务的权限 主机已连接到 S3 服务 URL (i.e. using ping or traceroute)  命令参考    Command Description     mc alias 在S3 兼容服务上运行的命令，为该服务指定别名   mc cp 将数据从一个或多个源复制到目标 S3 兼容服务   mc find 查询S3兼容的对象主机,在文件系统上搜索文件   mc mv 将数据从一个或多个源移动到目标 S3 兼容服务   mc mb 在指定路径对于S3兼容服务上的目标,mc mb 创建一个新的存储桶.对于文件系统上的目标，mc mb有等效于mkdir -p 的功能   mc rb 删除目标 S3 兼容服务上的存储桶及其所有内容   mc rm 删除目标 S3 兼容服务上的对象   官方参考文档：    MinIO Client (mc)     ","description":"MinIO Client配置与使用","tags":["minio","mc","minIO client"],"title":"MinIO Client配置与使用","uri":"/posts/minio-clientmc%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["centos7","docker","安装"],"content":"卸载旧版本 1 2 3 4 5 6 7 8 9 10  $ sudo yum remove docker \\  docker-client \\  docker-client-latest \\  docker-common \\  docker-latest \\  docker-latest-logrotate \\  docker-logrotate \\  docker-selinux \\  docker-engine-selinux \\  docker-engine   使用yum安装 1 2 3 4 5 6 7 8 9 10 11 12 13  $ sudo yum install -y yum-utils 添加yum软件源 $ sudo yum-config-manager \\  --add-repo \\  https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo $ sudo sed -i 's/download.docker.com/mirrors.aliyun.com\\/docker-ce/g' /etc/yum.repos.d/docker-ce.repo # 官方源 # $ sudo yum-config-manager \\ # --add-repo \\ # https://download.docker.com/linux/centos/docker-ce.repo   ###安装\n1  $ sudo yum install docker-ce docker-ce-cli containerd.io   ##使用脚本自动安装\n1 2 3 4  # $ curl -fsSL test.docker.com -o get-docker.sh $ curl -fsSL get.docker.com -o get-docker.sh $ sudo sh get-docker.sh --mirror Aliyun # $ sudo sh get-docker.sh --mirror AzureChinaCloud   ##启动Docker\n1 2  $ sudo systemctl enable docker $ sudo systemctl start docker   ##建立 docker 用户组 默认情况下，docker 命令会使用 Unix socket 与 Docker 引擎通讯。而只有 root 用户和 docker 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 root 用户。因此，更好地做法是将需要使用 docker 的用户加入 docker 用户组。 建立 docker 组：\n1  $ sudo groupadd docker   将当前用户加入 docker 组：\n1  $ sudo usermod -aG docker $USER   ","description":"CentOS7快速安装docker","tags":["centos7","docker","安装"],"title":"CentOS7快速安装docker","uri":"/posts/centos7%E5%AE%89%E8%A3%85docker/"},{"categories":["docker-compose","yaml","mysql"],"content":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  version:'3'services:mysql:image:mysqlcontainer_name:mysqlcommand:--default-authentication-plugin=mysql_native_password--character-set-server=utf8mb4--collation-server=utf8mb4_general_cirestart:unless-stoppedenvironment:MYSQL_ROOT_PASSWORD:******# root用户的密码MYSQL_USER:zabbix# 创建新用户MYSQL_PASSWORD:zabbix# 新用户的密码ports:- 3306:3306volumes:- /opt/mysql/data:/var/lib/mysql- /opt/mysql/conf:/etc/mysql/conf.d- /opt/mysql/logs:/logs  ","description":"docker-compose yaml文件格式参考","tags":["docker-compose","yaml","mysql"],"title":"docker-compose yaml文件格式参考","uri":"/posts/yaml%E6%A0%BC%E5%BC%8F%E5%8F%82%E8%80%83/"},{"categories":["centos7","mysql","编译"],"content":"1.软件准备 1 2 3  cd /opt/soft wget https://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.51.tar.gz tar xf mysql-5.6.51.tar.gz   2.创建用户 1 2  groupadd -g 550 mysql useradd -g mysql -u 550 mysql   3.安装依赖 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  yum install cmake autoconf wget gcc-c++ gcc ncurses-devel openssl openssl-devel -y cd mysql-5.6.51/ cmake \\ -DCMAKE_INSTALL_PREFIX=/opt/mysql \\ -DMYSQL_DATADIR=/opt/data/mysql \\ -DSYSCONFDIR=/etc \\ -DWITH_MYISAM_STORAGE_ENGINE=1 \\ -DWITH_INNOBASE_STORAGE_ENGINE=1 \\ -DWITH_MEMORY_STORAGE_ENGINE=1 \\ -DMYSQL_UNIX_ADDR=/var/run/mysql/mysqld.sock \\ -DMYSQL_TCP_PORT=3306 \\ -DENABLED_LOCAL_INFILE=1 \\ -DWITH_PARTITION_STORAGE_ENGINE=1 \\ -DENABLE_DOWNLOADS=1 \\ -DEXTRA_CHARSETS=all \\ -DDEFAULT_CHARSET=utf8 \\ -DDEFAULT_COLLATION=utf8_general_ci   ​\t执行完cmake之后、执行make和make install\n参数详解： 1 2 3 4 5 6 7 8 9 10 11 12 13  -DCMAKE_INSTALL_PREFIX=/opt/mysql \\  #安装路径 -DMYSQL_DATADIR=/opt/data/mysql \\  #数据文件存放地 -DSYSCONFDIR=/etc \\  #配置文件my.cnf存放地  -DWITH_MYISAM_STORAGE_ENGINE=1 \\  #支持MyIASM引擎  -DWITH_INNOBASE_STORAGE_ENGINE=1 \\  #支持InnoDB引擎  -DWITH_MEMORY_STORAGE_ENGINE=1 \\  #支持Memory引擎  -DMYSQL_UNIX_ADDR=/var/run/mysql/mysqld.sock \\  #连接数据库socket路径  -DMYSQL_TCP_PORT=3306 \\  #数据库端口号  -DENABLED_LOCAL_INFILE=1 \\  #允许从本地导入数据  -DWITH_PARTITION_STORAGE_ENGINE=1 \\ #安装支持数据库分区  -DEXTRA_CHARSETS=all \\  #安装所有的字符集  -DDEFAULT_CHARSET=utf8 \\  #默认字符  -DDEFAULT_COLLATION=utf8_general_ci   4.数据库初始化 ​\t安装目录授权\n1 2  chown -R mysql.mysql /opt/mysql/ chown -R mysql.mysql /opt/data/mysql/   ​\t修改my.cnf文件\n[mysql] socket=/opt/mysql/mysqld.sock default-character-set=utf8 [mysqld] skip-grant-tables explicit_defaults_for_timestamp=true skip-name-resolve port = 3306 socket=/opt/mysql/mysqld.sock basedir=/opt/mysql datadir=/opt/data/mysql max_connections = 2000 default-storage-engine=INNODB lower_case_table_names=1 max_allowed_packet=16M log-error=/opt/mysql/logs/mysql.log pid-file=/opt/mysql/mysql.pid !includedir /etc/my.cnf.d ​\t开始初始化\n1  ./scripts/mysql_install_db --user=mysql --datadir=/opt/data/mysql --no-defaults   ​\t启动mysql\n1 2 3 4  #拷贝启动文件 cp ./support-files/mysql.server /etc/init.d/mysql chmod +x /etc/init.d/mysql /etc/init.d/mysql start   ​\t设置mysql环境变量\n1 2 3  vim ~/.bash_profile export PATH=$PATH:/usr/local/mysql/bin source /etc/profile   ​\t修改数据库密码\n1 2 3 4  mysqlusemysql;updateusersetpassword=password(\"newpasswd\")whereuser='root'andhost='localhost';flushprivileges;  ","description":"CentOS7编译安装MySQL5.6","tags":["centos7","mysql","编译"],"title":"CentOS7编译安装MySQL5.6","uri":"/posts/centos7%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85mysql5.6/"},{"categories":["centos7","redis","编译"],"content":"​\tCentos7 Redis5安装及配置，自启动配置\n1.解压、编译、安装reids ​\t官网地址\n1 2 3 4 5 6 7 8 9 10 11 12  #获取安装包 cd /opt/soft wget https://download.redis.io/releases/redis-5.0.14.tar.gz #解压 tar xf redis-5.0.14.tar.gz #安装依赖 yum -y install gcc automake autoconf libtool make #编译 cd redis-5.0.14/ make #编译安装 make install PREFIX=/opt/redis5   2.Redis配置文件修改 ​\t创建redis的data目录，存放redis配置文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  mkdir -p /opt/data/redis #复制redis.conf配置文件 cp redis.conf /opt/redis5/bin/ cd /opt/redis5/bin/ #配置文件设置 vim redis.conf daemonize yes\t--开启守护进程模式 bind 127.0.0.1\t--注释bind 127.0.0.1这行，否则只能本地连接redis protected-mode no\t--关闭保护模式，开启远程连接 pidfile /opt/data/redis/redis.pid logfile \"redis.log\" dbfilename dump.rdb dir /opt/data/redis requirepass foobared\t--在这行下面增加一行“requirepass password”来开启Redis密码认证   3.Redis启动 1  /opt/redis5/bin/redis-server /opt/redis5/bin/redis.conf   4.Centos7设置Redis开机启动 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  #创建服务文件 vi /etc/systemd/system/redis.service [Unit] #Description:描述服务 Description=Redis #After:描述服务类别  After=network.target #服务运行参数的设置  [Service] #Type=forking是后台运行的形式  Type=forking #ExecStart为服务的具体运行命令，路径必须是绝对路径  ExecStart=/opt/redis5/bin/redis-server /opt/redis5/bin/redis.conf #ExecReload为重启命令 ，路径必须是绝对路径  ExecReload=/opt/redis5/bin/redis-server -s reload #ExecStop为停止命令 ，路径必须是绝对路径  ExecStop=/opt/redis5/bin/redis-server -s stop #PrivateTmp=True表示给服务分配独立的临时空间  PrivateTmp=true #运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3 [Install] WantedBy=multi-user.target #重载系统服务 systemctl daemon-reload #命令 systemctl start redis.service #启动redis服务  systemctl enable redis.service #设置开机自启动  systemctl disable redis.service #停止开机自启动  systemctl status redis.service #查看服务当前状态  systemctl restart redis.service　#重新启动服务  systemctl list-units --type=service #查看所有已启动的服务    ","description":"CentOS7编译安装Redis5.0","tags":["centos7","redis","编译"],"title":"CentOS7编译安装Redis5.0","uri":"/posts/centos7%E5%AE%89%E8%A3%85redis5/"},{"categories":["centos7","go","nsq"],"content":"nsq简介 实时的分布式消息处理平台，其设计的目的是用来大规模地处理每天数以十亿计级别的消息。它具有分布式和去中心化拓扑结构，该结构具有无单点故障、故障容错、高可用性以及能够保证消息的可靠传递的特征  依赖 ​\tnsq使用go语言编写，需要安装go的环境。本文选用最新版go语言\ngo环境安装 获取包 1 2 3 4  #下载包 wget https://golang.google.cn/dl/go1.18.2.linux-amd64.tar.gz #解压go包到/usr/local tar -zxf go1.18.2.linux-amd64.tar.gz -C /usr/local   配置go环境变量 1 2 3 4 5 6 7 8 9  vim /etc/profile export GOROOT=/usr/local/go export PATH=$GOPATH/bin:$GOROOT/bin:$PATH #环境变量生效 source /etc/profile #和下面的命令等价 . /etc/profile #和上面的命令等价 #检查验证 go env go version   nsq安装 获取安装包 1 2 3 4  wget https://s3.amazonaws.com/bitly-downloads/nsq/nsq-1.2.0.linux-amd64.go1.12.9.tar.gz tar -zxvf nsq-1.2.0.linux-amd64.go1.12.9.tar.gz -C /usr/local/ cd /usr/local mv nsq-1.2.0.linux-amd64.go1.12.9/ nsq-1.2   配置nsqlookupd服务 1 2 3 4 5 6 7 8 9 10 11  vi /usr/lib/systemd/system/nsqlookupd.service [Unit] Description=nsqlookup daemon Service After=network.target remote-fs.target nss-lookup.target [Service] #Type= PrivateTmp=yes ExecStart=/usr/local/nsq-1.2/bin/nsqlookupd Restart=on-abort [Install] WantedBy=multi-user.target   配置nsqd服务 1 2 3 4 5 6 7 8 9 10 11 12  vi /usr/lib/systemd/system/nsqd.service [Unit] Description=nsqd daemon Service After=network.target remote-fs.target nss-lookup.target [Service] #Type= PrivateTmp=yes ExecStart=/usr/local/nsq-1.2/bin/nsqd --lookupd-tcp-address=0.0.0.0:4160 --tcp-address=0.0.0.0:4150 --http-address=0.0.0.0:4151 --broadcast-address=127.0.0.1 #修改broadcast-address Restart=on-abort [Install] WantedBy=multi-user.target   配置nsqadmin服务 1 2 3 4 5 6 7 8 9 10 11  vi /usr/lib/systemd/system/nsqadmin.service [Unit] Description=nsqadmin daemon Service After=network.target remote-fs.target nss-lookup.target [Service] #Type= PrivateTmp=yes ExecStart=/usr/local/nsq-1.2/bin/nsqadmin --lookupd-http-address=127.0.0.1:4161 Restart=on-abort [Install] WantedBy=multi-user.target   启动nsq 1 2 3  systemctl start nsqd systemctl start nsqadmin systemctl start nsqlookupd   nsq特性  支持无 SPOF 的分布式拓扑 水平扩展(没有中间件，无缝地添加更多的节点到集群) 低延迟消息传递 (性能) 结合负载均衡和多播消息路由风格 擅长面向流媒体(高通量)和工作(低吞吐量)工作负载 主要是内存中(除了高水位线消息透明地保存在磁盘上) 运行时发现消费者找到生产者服务(nsqlookupd) 传输层安全性 (TLS) 数据格式不可知 一些依赖项(容易部署)和健全的，有界，默认配置 任何语言都有简单 TCP 协议支持客户端库 HTTP 接口统计、管理行为和生产者(不需要客户端库发布) 为实时检测集成了 statsd 健壮的集群管理界面 (nsqadmin)  NSQ组件 NSQD ​\tnsqd 是一个守护进程，负责接收，排队，投递消息给客户端。也就是说这个服务是干活的。它可以独立运行，不过通常它是由 nsqlookupd 实例所在集群配置的。 nsqd特性如下：\n 对订阅了同一个topic，同一个channel的消费者使用负载均衡策略（不是轮询） 只要channel存在，即使没有该channel的消费者，也会将生产者的message缓存到队列中（注意消息的过期处理） 保证队列中的message至少会被消费一次，即使nsqd退出，也会将队列中的消息暂存磁盘上(结束进程等意外情况除外) 限定内存占用，能够配置nsqd中每个channel队列在内存中缓存的message数量，一旦超出，message将被缓存到磁盘中 topic，channel一旦建立，将会一直存在，要及时在管理台或者用代码清除无效的topic和channel，避免资源的浪费  NSQLOOKUPD ​\tnsqlookupd 是守护进程负责管理拓扑信息。客户端通过查询 nsqlookupd 来发现指定话题（topic）的生产者，并且 nsqd 节点广播话题（topic）和通道（channel）信息。也就是说nsqlookupd是管理者。 nsqlookupd 特性：\n 唯一性，在一个Nsq服务中只有一个nsqlookupd服务。当然也可以在集群中部署多个nsqlookupd，但它们之间是没有关联的. 去中心化，即使nsqlookupd崩溃，也会不影响正在运行的nsqd服务 充当nsqd和naqadmin信息交互的中间件 提供一个http查询服务，给客户端定时更新nsqd的地址目录  NSQADMIN ​\tnsqadmin是web管理界面，用来汇集集群的实时统计，并执行不同的管理任务。也就是说nsqadmin就是我们在浏览器中看到的那个。 nsqadmin特性如下：\n 提供一个对topic和channel统一管理的操作界面以及各种实时监控数据的展示，界面设计的很简洁，操作也很简单 展示所有message的数量 能够在后台创建topic和channel nsqadmin的所有功能都必须依赖于nsqlookupd，nsqadmin只是向nsqlookupd传递用户作并展示来自nsqlokupd的数据  ","description":"go环境安装，nsq安装，nsq简介，nsq组件介绍","tags":["centos7","go","nsq"],"title":"CentOS7安装NSQ","uri":"/posts/centos7%E5%AE%89%E8%A3%85nsq/"},{"categories":["centos7","zabbix","安装"],"content":"​\tLNMP就是 Linux+nginx + mysql + PHP，把Apache替换为Nginx\n一、安装php7.2（zabbix5.0以上版本最低要求7.2） 1 2 3  [root@ec-zabbix ~]# cd /opt/ [root@ec-zabbix opt]# groupadd www [root@ec-zabbix opt]# useradd -g www www   二、安装扩展包并更新系统内核和安装php需要的拓展(包含Nginx依赖） 1 2 3  yum install epel-release -y yum update -y yum -y install wget vim pcre pcre-devel openssl openssl-devel libicu-devel gcc gcc-c++ autoconf libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel zlib zlib-devel glibc glibc-devel glib2 glib2-devel ncurses ncurses-devel curl curl-devel krb5-devel libidn libidn-devel openldap openldap-devel nss_ldap jemalloc-devel cmake boost-devel bison automake libevent libevent-devel gd gd-devel libtool* libmcrypt libmcrypt-devel mcrypt mhash libxslt libxslt-devel readline readline-devel gmp gmp-devel libcurl libcurl-devel openjpeg-devel   三、开始配置php7.2参数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40  $ cp -frp /usr/lib64/libldap* /usr/lib/ $ ./configure --prefix=/opt/php \\ --with-config-file-path=/opt/php/etc \\ --enable-fpm \\ --with-fpm-user=www \\ --with-fpm-group=www \\ --enable-mysqlnd \\ --with-mysqli=mysqlnd \\ --with-pdo-mysql=mysqlnd \\ --with-jpeg-dir=/usr/local/jpeg/ \\ --with-png-dir=/usr/local/png/ \\ --with-freetype-dir=/usr/local/freetype \\ --enable-mysqlnd-compression-support \\ --with-iconv-dir \\ --with-zlib \\ --enable-xml \\ --disable-rpath \\ --enable-bcmath \\ --enable-shmop \\ --enable-sysvsem \\ --enable-inline-optimization \\ --with-curl \\ --with-gd=/usr/local/gd \\ --enable-mbregex \\ --enable-mbstring \\ --enable-intl \\ --enable-ftp \\ --with-openssl \\ --with-mhash \\ --enable-pcntl \\ --enable-sockets \\ --with-xmlrpc \\ --enable-soap \\ --with-gettext \\ --disable-fileinfo \\ --enable-opcache \\ --with-pear \\ --enable-maintainer-zts \\ --with-ldap=shared \\ --without-gdbm   四、开始编译安装 1  make -j 4 \u0026\u0026 make install   完成安装后配置php.ini文件： 1 2 3 4 5  $ cp php.ini-development /opt/php/etc/php.ini $ cp /opt/php/etc/php-fpm.conf.default /opt/php/etc/php-fpm.conf $ cp /opt/php/etc/php-fpm.d/www.conf.default /opt/php/etc/php-fpm.d/www.conf ln -s /opt/php/bin/php /usr/bin/php7 php7 -v   修改 php.ini 相关参数： 1 2 3 4 5 6 7 8 9  $ vim /opt/php/etc/php.ini expose_php = Off short_open_tag = ON max_execution_time = 300 max_input_time = 300 memory_limit = 128M post_max_size = 32M date.timezone = Asia/Shanghai ;mbstring.func_overload=2 注释   设置 OPcache 缓存： 1 2 3 4 5 6 7  [opcache] opcache.memory_consumption=128 opcache.interned_strings_buffer=8 opcache.max_accelerated_files=4000 opcache.revalidate_freq=60 opcache.fast_shutdown=1 opcache.enable_cli=1   设置php安全函数（可选，如果程序需要这些函数，可以取消禁止）: 1 2 3 4 5 6 7  $ vim /opt/php/etc/php.ini 默认值： disable_functions = 修改为： disable_functions = passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,ini_alter,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server,escapeshellcmd,dll,popen,disk_free_space,checkdnsrr,checkdnsrr,getservbyname,getservbyport,disk_total_space,posix_ctermid,posix_get_last_error,posix_getcwd, posix_getegid,posix_geteuid,posix_getgid, posix_getgrgid,posix_getgrnam,posix_getgroups,posix_getlogin,posix_getpgid,posix_getpgrp,posix_getpid, posix_getppid,posix_getpwnam,posix_getpwuid, posix_getrlimit, posix_getsid,posix_getuid,posix_isatty, posix_kill,posix_mkfifo,posix_setegid,posix_seteuid,posix_setgid, posix_setpgid,posix_setsid,posix_setuid,posix_strerror,posix_times,posix_ttyname,posix_uname 或通配： disable_functions = passthru,exec,system,chroot,chgrp,chown,shell_exec,proc_open,proc_get_status,popen,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru   配置www.conf 取消以下注释并修改优化其参数： 1 2 3 4 5 6 7 8 9 10 11 12 13  listen = /opt/php/php-cgi.sock listen.owner = www listen.group = www listen.mode = 0660 listen.allowed_clients = 127.0.0.1 pm = dynamic listen.backlog = -1 pm.max_children = 180 pm.start_servers = 50 pm.min_spare_servers = 50 pm.max_spare_servers = 180 request_terminate_timeout = 120 request_slowlog_timeout = 50   配置php-fpm.conf 取下以下注释并填写完整路径： 1  pid = /opt/php/php-fpm.pid   创建system系统单元文件php-fpm启动脚本： 1 2 3 4 5 6 7 8 9 10 11 12 13  $ vim /usr/lib/systemd/system/php-fpm.service [Unit] Description=The PHP FastCGI Process Manager After=syslog.target network.target [Service] Type=simple PIDFile=/opt/php/php-fpm.pid ExecStart=/opt/php/sbin/php-fpm --nodaemonize --fpm-config /opt/php/etc/php-fpm.conf ExecReload=/bin/kill -USR2 $MAINPID [Install] WantedBy=multi-user.target   启动php-fpm服务并加入开机自启动： 1 2  $ systemctl enable php-fpm.service $ systemctl restart php-fpm.service   五、安装mysql8.0* ​\t由于 MySQL Server 是 C/C++ 开发的，所以编译安装需要先安装 cmake 和 gcc 等编译工具，构造编译环境\n环境准备 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  ##安装 cmake： wget https://cmake.org/files/v3.21/cmake-3.21.0-linux-x86_64.tar.gz tar xvf cmake-3.21.0-linux-x86_64.tar.gz mv cmake-3.21.0-linux-x86_64 /usr/local/cmake echo -e \"\\nexport PATH=/usr/local/cmake/bin:\\$PATH\" \u003e\u003e/etc/profile source /etc/profile ##安装gcc,并安装编译安装时需要用的工具包： yum -y install bzip2 gcc gcc-c++ wget http://ftp.gnu.org/gnu/gcc/gcc-11.2.0/gcc-11.2.0.tar.gz tar zxvf gcc-11.2.0.tar.gz cd gcc-11.2.0 ## 下载mpfr、gmp、mpc、isl等依赖包： ./contrib/download_prerequisites ## 开始编译安装 gcc： mkdir build \u0026\u0026 cd build ../configure --prefix=/usr/ --enable-checking=release \\ --enable-languages=c,c++ --disable-multilib make -j4 \u0026\u0026 make install ## 注意了，上面那个 prefix 必须用 usr/，以便覆盖掉旧版的 gcc ，以免编译程序找不到新版 gcc ## 检查验证 gcc 版本 gcc -v   1 2  ##安装 ncurses-devel、bison、openssl-devel： yum -y install ncurses-devel bison openssl-devel   下载MYSQL源代码 打开 http://mysql.com/downloads/下载页面，找到 MySQL Community(GPL)Downloads 1  wget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-boost-8.0.26.tar.gz   开始编译mysql8.0* 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  vim /etc/my.conf [client] port=3306 socket=/tmp/mysql.sock default-character-set=utf8 #user=root #password=123 [mysqld] server-id=1 #skip-grant-tables port=3306 user=mysql max_connections=200 socket=/tmp/mysql.sock basedir=/opt/mysql datadir=/opt/mysql/data pid-file=/opt/data/mysql.pid init-connect='SET NAMES utf8' character-set-server=utf8 default-storage-engine=INNODB log_error=/opt/mysql/log/mysql-error.log slow_query_log_file=/opt/mysql/log/mysql-slow.log [mysqldump] quick max_allowed_packet=16M cmake . \\ -DWITH_BOOST=./boost/ \\ -DCMAKE_INSTALL_PREFIX=/opt/mysql \\ -DMYSQL_DATADIR=/opt/mysql/data \\ -DSYSCONFDIR=/etc \\ -DWITHOUT_FEDERATED_STORAGE_ENGINE=1 \\ -DWITHOUT_ARCHIVE_STORAGE_ENGINE=1 \\ -DFORCE_INSOURCE_BUILD=1 ## SYSCONFDIR=/ # 修改读取 my.cnf 的路径 ## WITHOUT_FEDERATED_STORAGE_ENGINE=1 \\ # 摘掉 FEDERATED 存储引擎 ## WITHOUT_ARCHIVE_STORAGE_ENGINE=1 \\ # 摘掉 ARCHIVE 存储引擎   安装mysql8.0*： 1  make -j4 \u0026\u0026 make install   mysql基本设置： 1 2 3 4 5 6 7 8 9 10 11  ##配置环境变量: echo -e \"export PATH=/opt/mysql/bin:\\$PATH\" \u003e\u003e/etc/profile source etc/profile ##建组建用户 groupadd mysql useradd -M -g mysql -s /sbin/nologin -d /opt/mysql mysql ##创建目录结构 mkdir -p /opt/mysql/{log,tmp} chown mysql:mysql /opt/mysql/ -R   初始化数据库 1 2  cd /opt/mysql/bin/ ./mysqld --initialize-insecure --user=mysql --basedir=/opt/mysql --datadir=/opt/mysql/data   配置mysql服务并启动 1 2 3 4 5 6 7 8  ##从源代码中拷贝msyql.server到系统目录下： cp /opt/sourece/msyql/support-files/mysql.server /etc/init.d/mysqld vim /etc/init.d/mysqld basedir=/opt/mysql datadir=/opt/mysql/data chmod +x /etc/init.d/mysqld /etc/init.d/mysqld start   源码编译安装nginx: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  ##创建nginx用户和目录： groupadd -r nginx useradd -r -g nginx -s /bin/false -M nginx id nginx ##开始编译： ./configure \\ --user=nginx \\ --group=nginx \\ --prefix=/opt/nginx \\ --sbin-path=/opt/nginx/sbin/nginx \\ --conf-path=/opt/nginx/conf/nginx.conf \\ --pid-path=/opt/nginx/nginx.pid \\ --lock-path=/opt/nginx/nginx.lock \\ --error-log-path=/opt/nginx/logs/error.log \\ --http-log-path=/opt/nginx/logs/access.log \\ --with-http_gzip_static_module \\ --with-http_stub_status_module \\ --with-http_ssl_module \\ --with-pcre \\ --with-file-aio \\ --with-http_realip_module \\ --http-client-body-temp-path=/opt/nginx/client/ \\ --http-proxy-temp-path=/opt/nginx/proxy/ \\ --http-fastcgi-temp-path=/opt/nginx/fcgi/ \\ --http-uwsgi-temp-path=/opt/nginx/uwsgi \\ --http-scgi-temp-path=/opt/nginx/scgi ln -s /opt/nginx/sbin/nginx /usr/sbin/ ##开始安装： make \u0026\u0026 make install   设置nginx开机启动 1 2 3 4 5 6 7 8 9 10 11 12 13 14  vi /lib/systemd/system/nginx.service [Unit] Description=nginx service After=network.target [Service] Type=forking ExecStart=/opt/nginx/sbin/nginx ExecReload=/opt/nginx/sbin/nginx -s reload ExecStop=/opt/nginx/sbin/nginx -s quit PrivateTmp=true [Install] WantedBy=multi-user.target   1 2  # systemctl enable nginx // 加入开机启动 # systemctl disable nginx // 禁止开启启动   1 2 3 4 5 6 7 8 9 10  ##以服务的方式启动： pkill nginx // 杀死nginx进程 systemctl start nginx ##启动/停止/重启/查看： systemctl start nginx　启动服务 systemctl stop nginx　停止服务 systemctl restart nginx　重启服务 systemctl status nginx 查看服务当前状态 systemctl list-units --type=service 查看所有已启动的服务   编译安装zabbix： 新建zabbix用户： 1 2 3 4  groupadd --system zabbix useradd --system -g zabbix -d /opt/zabbix -s /sbin/nologin -c \"Zabbix Monitoring System\" zabbix mkdir -mu=rwx,g=rwx,o= -p /opt/zabbix chown zabbix:zabbix /opt/zabbix   新建zabbix数据库和用户： 1 2 3 4 5 6 7 8 9 10 11  msyql-uroot-pcreatedatabasezabbixcharactersetutf8collateutf8_bin;createuser'zabbix'@'%'identifiedby'zabbix';grantallprivilegeson*.*to'zabbix'@'%'withgrantoption;##修改密码授权规则ALTERUSER'zabbix'@'%'IDENTIFIEDBY'zabbix'PASSWORDEXPIRENEVER;ALTERUSER'zabbix'@'%'IDENTIFIEDWITHmysql_native_passwordBY'zabbix';##刷新权限FLUSHPRIVILEGES;  安装依赖： 1 2 3 4 5 6 7 8 9 10 11 12 13 14  yum -y install net-snmp net-snmp-devel libssh2-devel libevent-devel pcre-devel libcurl-devel java-devel openldap-devel --nogpgcheck ##安装fping（由于zabbix使用fping替代了ping作为icmp的工具，所以还要安装 fping） wget http://fping.org/dist/fping-5.0.tar.gz tar zxvf fping-5.0.tar.gz \u0026\u0026 cd fping-5.0 \u0026\u0026 ./configure --prefix=/usr/local/fping make \u0026\u0026 make install ln -s /usr/local/fping/sbin/fping /usr/local/sbin/ chown root:zabbix /usr/local/sbin/fping chmod 4710 /usr/local/sbin/fping ##在Zabbbix上安装unixODBC yum -y install unixODBC unixODBC-devel ##在Zabbix上安装对应数据库的unixODBC驱动,对于MySQL，安装unixODBC驱动 yum -y install mariadb-connector-odbc   开始编译zabbix： 1 2 3 4 5 6 7 8 9 10 11 12  ./configure \\ --prefix=/opt/zabbix \\ --enable-server \\ --enable-agent \\ --with-mysql=/usr/bin/mysql_config \\ --with-net-snmp \\ --enable-ipv6 \\ --with-libcurl \\ --with-ssh2 \\ --with-unixodbc \\ --enable-java \\ --with-libxml2   安装zabbix 1  make \u0026\u0026 make install   导入zabbix初始数据： 1 2 3 4 5 6 7  cd /opt/zabbix/database/mysql mysql\u003e use zabbix; mysql\u003e set sql_log_bin=0; mysql\u003e source ./schema.sql; mysql\u003e source ./images.sql; mysql\u003e source ./data.sql; mysql\u003e set sql_log_bin=1;   Zabbix_server.conf 配置: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45  # 创建 ZabbixServer 日志目录 mkdir -p /opt/zabbix/logs # 修改 ZabbixServer 配置文件 grep -Ev \"#|^$\" /opt/zabbix/etc/zabbix_server.conf LogFile=/opt/zabbix/logs/zabbix_server.log LogFileSize=0 DebugLevel=3 DBHost=localhost DBName=zabbix DBUser=zabbix DBPassword=zabbix DBSocket=/tmp/mysql.sock DBPort=3306 #系统报警：Zabbix poller processes more than 75% busy #解决办法：修改此值StartPollers StartPollers=50 StartPreprocessors=30 StartPollersUnreachable=5 StartTrappers=300 #系统报警Zabbix icmp pinger processes more than 75% busy #解决办法：修改StartPingers此值 StartPingers=50 StartDiscoverers=50 StartHTTPPollers=50 #系统告警：More than 75% used in the configuration cache， 可用的配置缓存超过75% #解决办法： 更改默认缓存配置的大小，默认CacheSize只有8M,可根据自己需求改大即可 CacheSize=2G StartDBSyncers=32 HistoryCacheSize=512M HistoryIndexCacheSize=512M TrendCacheSize=512M #系统告警：Zabbix value cache working in low memory mode #定位到ValueCacheSize关键字位置，然后调高ValueCacheSize大小，根据自己环境调整 ValueCacheSize=1G Timeout=10 AlertScriptsPath=/opt/data/zabbix/alertscripts ExternalScripts=/opt/data/zabbix/externalscripts FpingLocation=/usr/sbin/fping LogSlowQueries=3000 StatsAllowedIP=127.0.0.1   Zabbix_agentd.conf 配置 1 2 3 4 5 6 7 8 9 10  vim /opt/zabbix/etc/zabbix_agentd.conf ## Passive checks related #被动检查相关配置 Server=172.18.8.8 # 指向当前zabbix server ## Option: ListenPort ListenPort=10050 # 监听端口 ### Option: StartAgents  StartAgents=5 # 被动状态时默认启动的实例数(进程数)，为0不监听任何端口 ### Option: Hostname  Hostname=172.18.8.9 # 区分大小写且在zabbix server唯一的值   Zabbix Web前端设置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  # 在安装目录将 ui 拷贝到指定的 web root： mkdir -p /opt/nginx/html # 从 5.0 开始，放在 ui 文件夹下 cp -a /opt/source/zabbix/ui/* /opt/nginx/ngx_web cd /opt/nginx/html/conf cp zabbix.conf.php.example zabbix.conf.php # zabbix的运行权限 chown -R zabbix.zabbix /opt/nginx/html # 修改配置文件 # 注意修改后，访问 ZabbixServer 的安装文件 setup.php 的时候将跳过环境检查，将直接进入监控页面 cat /opt/nginx/html/conf/zabbix.conf.php \u003c?php // Zabbix GUI configuration file. global $DB; $DB['TYPE'] = 'MYSQL'; # $DB['SERVER'] = 'localhost'; # 此项配置为 localhost 在安装 ZabbixServer 的时候会报错 $DB['SERVER']\t= '127.0.0.1'; $DB['PORT'] = '3306'; $DB['DATABASE'] = 'zabbix'; $DB['USER'] = 'zabbix'; $DB['PASSWORD'] = 'zabbix'; // Schema name. Used for IBM DB2 and PostgreSQL. $DB['SCHEMA'] = ''; $ZBX_SERVER = 'localhost'; $ZBX_SERVER_PORT = '10051'; $ZBX_SERVER_NAME = 'Zabbix server'; $IMAGE_FORMAT_DEFAULT = IMAGE_FORMAT_PNG;   启动zabbix： 1 2  /opt/zabbix/sbin/zabbix_server -c /opt/zabbix/etc/zabbix_server.conf netstat -antup | grep zabbix   Zabbix设置开机自启和自启动 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  # 在zabbix源码包中找到启动脚本，复制到/etc/init.d/目录下 ll /opt/source/zabbix/misc/init.d/tru64/* -rw-r--r--. 1 sekorm sekorm 1519 Aug 23 19:50 zabbix_agentd -rw-r--r--. 1 sekorm sekorm 1521 Aug 23 19:50 zabbix_server cp /opt/source/zabbix/misc/init.d/tru64/* /etc/init.d/ # 修改启动脚本的配置文件 在第二行插入：# chkconfig: 2345 10 90 vim /etc/init.d/zabbix_server 22 BASEDIR=/opt/zabbix vim /etc/init.d/zabbix_agentd 22 BASEDIR=/opt/zabbix # 启动zbbix_server、zabbix_agentd /etc/init.d/zabbix_server start Starting zabbix_server (via systemctl): [ 确定 ] /etc/init.d/zabbix_agentd start Starting zabbix_agentd (via systemctl): [ 确定 ] # 自启动zbbix_server、zabbix_agentd chkconfig zabbix_server on chkconfig zabbix_agentd on   ","description":"CentOS7源码编译安装zabbix5.0","tags":["centos7","zabbix","安装"],"title":"CentOS7源码编译安装Zabbix5.0","uri":"/posts/centos7%E6%BA%90%E7%A0%81%E6%90%AD%E5%BB%BAzabbix5.0/"},{"categories":["navicat","工具","激活工具"],"content":"1.安装 ​\t打开官网:\nhttps://navicat.com.cn/download/navicat-premium\n2.激活 支持Windows和Mac!\nwindows:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  @echo off echo Delete HKEY_CURRENT_USER\\Software\\PremiumSoft\\NavicatPremium\\Registration[version and language] for /f %%i in ('\"REG QUERY \"HKEY_CURRENT_USER\\Software\\PremiumSoft\\NavicatPremium\" /s | findstr /L Registration\"') do ( reg delete %%i /va /f ) echo. echo Delete Info folder under HKEY_CURRENT_USER\\Software\\Classes\\CLSID for /f %%i in ('\"REG QUERY \"HKEY_CURRENT_USER\\Software\\Classes\\CLSID\" /s | findstr /E Info\"') do ( reg delete %%i /va /f ) echo. echo Finish pause   mac:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  @echo off echo Delete HKEY_CURRENT_USER\\Software\\PremiumSoft\\NavicatPremium\\Registration[version and language] for /f %%i in ('\"REG QUERY \"HKEY_CURRENT_USER\\Software\\PremiumSoft\\NavicatPremium\" /s | findstr /L Registration\"') do ( reg delete %%i /va /f ) echo. echo Delete Info folder under HKEY_CURRENT_USER\\Software\\Classes\\CLSID for /f %%i in ('\"REG QUERY \"HKEY_CURRENT_USER\\Software\\Classes\\CLSID\" /s | findstr /E Info\"') do ( reg delete %%i /va /f ) echo. echo Finish pause   3.其他路子 ​\t教师和学生申请！\nhttps://www.navicat.com.cn/sponsorship/education/student\n","description":"Navicat激活","tags":["navicat","工具","激活工具"],"title":"Navicat激活","uri":"/posts/navicat%E6%BF%80%E6%B4%BB/"},{"categories":["rocketmq"],"content":"​\tRocketMQ使用者反馈在消息发送过程中偶尔会出现如下错误信息：\n [REJECTREQUEST]system busy, start flow control for a while [PC_SYNCHRONIZED]broker busy, start flow control for a while [PCBUSY_CLEAN_QUEUE]broker busy, start flow control for a while, period in queue: %sms, size of queue: %d too many requests and system thread pool busy, RejectedExecutionException [TIMEOUT_CLEAN_QUEUE]broker busy  原因： ​\t消息发送时抛出system busy、broker busy错误，其本质是系统的PageCache繁忙，通俗一点讲就是向PageCache追加消息时，单个消息发送占用的时间超过1s了。\n  osPageCacheBusyTimeOutMills + broker busy\npagecache压力较大\n判断pagecache是否忙的依据就是在写入消息时，在向内存追加消息时加锁的时间，默认的判断标准是加锁时间超过1s，就认为是pagecache压力大，向客户端抛出相关的错误日志。\n优化: 理论上可以把osPageCacheBusyTimeOutMills的值调大一点，但是不推荐，特别是对时效敏感的系统\n  sendThreadPoolQueueCapacity + system busy\n发送线程池挤压的拒绝策略\n简单说所有到达Broker的请求会被转入到一个线程继续，这个线程的长度由sendThreadPoolQueueCapacity决定，默认长度为10000，超过就报system busy\n优化：理论上可以增加该参数防止报异常，但是不建议，治标不治本\n  brokerFastFailureEnable + broker busy\nBroker端快速失败策略\nbrokerFastFailureEnable默认为true，表示开启快速失败策略\n如果brokerFastFailureEnable=true,当如果发现Broker服务器的PageCache繁忙，如果发现sendThreadPoolQueue队列中不为空，表示还有排队的发送请求在排队等待执行，则直接结束等待，返回broker busy，\n  优化方向： 方向一：   当Broker服务器自身比较忙的时候，快速失败，并且在接下来的一段时间内会规避该Broker，这样该Broker恢复提供了时间保证，Broker本身的架构是支持分布式水平扩容的，增加Topic的队列数，降低单台Broker服务器的负载，从而避免出现PageCache。\n  与之扩容对应的，也可以通过对原有Broker进行升配，例如增加内存、把机械盘换成SSD，但这种情况，通常需要重启Broekr服务器，没有扩容来的方便\n  方向二： ​\t在broker配置文件中将transientStorePoolEnable设置为true。\n  依据： 启用“读写”分离，消息发送时消息先追加到DirectByteBuffer(堆外内存)中，然后在异步刷盘机制下，会将DirectByteBuffer中的内容提交到PageCache，然后刷写到磁盘。消息拉取时，直接从PageCache中拉取，实现了读写分离，减轻了PageCaceh的压力，能从根本上解决该问题。\n  缺点： 会增加数据丢失的可能性，如果Broker JVM进程异常退出，提交到PageCache中的消息是不会丢失的，但存在堆外内存(DirectByteBuffer)中但还未提交到PageCache中的这部分消息，将会丢失。但通常情况下，RocketMQ进程退出的可能性不大。\n  ","description":"消息发送过程中偶尔会出现错误信息","tags":["rocketmq"],"title":"RocketMQ出现system busy、broker busy原因分析与解决","uri":"/posts/rocketmq_1/"}]
