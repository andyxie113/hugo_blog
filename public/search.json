[{"categories":["centos7","mysql","编译"],"content":"1.软件准备 1 2 3  cd /opt/soft wget https://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.51.tar.gz tar xf mysql-5.6.51.tar.gz   2.创建用户 1 2  groupadd -g 550 mysql useradd -g mysql -u 550 mysql   3.安装依赖 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  yum install cmake autoconf wget gcc-c++ gcc ncurses-devel openssl openssl-devel -y cd mysql-5.6.51/ cmake \\ -DCMAKE_INSTALL_PREFIX=/opt/mysql \\ -DMYSQL_DATADIR=/opt/data/mysql \\ -DSYSCONFDIR=/etc \\ -DWITH_MYISAM_STORAGE_ENGINE=1 \\ -DWITH_INNOBASE_STORAGE_ENGINE=1 \\ -DWITH_MEMORY_STORAGE_ENGINE=1 \\ -DMYSQL_UNIX_ADDR=/var/run/mysql/mysqld.sock \\ -DMYSQL_TCP_PORT=3306 \\ -DENABLED_LOCAL_INFILE=1 \\ -DWITH_PARTITION_STORAGE_ENGINE=1 \\ -DENABLE_DOWNLOADS=1 \\ -DEXTRA_CHARSETS=all \\ -DDEFAULT_CHARSET=utf8 \\ -DDEFAULT_COLLATION=utf8_general_ci   执行完cmake之后、执行make和make install\n参数详解： 1 2 3 4 5 6 7 8 9 10 11 12 13  -DCMAKE_INSTALL_PREFIX=/opt/mysql \\  #安装路径 -DMYSQL_DATADIR=/opt/data/mysql \\  #数据文件存放地 -DSYSCONFDIR=/etc \\  #配置文件my.cnf存放地  -DWITH_MYISAM_STORAGE_ENGINE=1 \\  #支持MyIASM引擎  -DWITH_INNOBASE_STORAGE_ENGINE=1 \\  #支持InnoDB引擎  -DWITH_MEMORY_STORAGE_ENGINE=1 \\  #支持Memory引擎  -DMYSQL_UNIX_ADDR=/var/run/mysql/mysqld.sock \\  #连接数据库socket路径  -DMYSQL_TCP_PORT=3306 \\  #数据库端口号  -DENABLED_LOCAL_INFILE=1 \\  #允许从本地导入数据  -DWITH_PARTITION_STORAGE_ENGINE=1 \\ #安装支持数据库分区  -DEXTRA_CHARSETS=all \\  #安装所有的字符集  -DDEFAULT_CHARSET=utf8 \\  #默认字符  -DDEFAULT_COLLATION=utf8_general_ci   4.数据库初始化 1  #对目录授权   ","description":"centos7编译安装mysql5.6","tags":["centos7","mysql","编译"],"title":"centos7编译安装mysql5.6","uri":"/posts/centos7%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85mysql5.6/"},{"categories":["centos","go","nsq"],"content":"安装go环境 获取包 1 2 3 4  #下载包 wget https://golang.google.cn/dl/go1.18.2.linux-amd64.tar.gz #解压go包到/usr/local tar -zxf go1.18.2.linux-amd64.tar.gz -C /usr/local   配置go环境变量 1 2 3 4 5 6 7 8 9  vim /etc/profile export GOROOT=/usr/local/go export PATH=$GOPATH/bin:$GOROOT/bin:$PATH #环境变量生效 source /etc/profile #和下面的命令等价 . /etc/profile #和上面的命令等价 #检查验证 go env go version   nsq安装 获取安装包 1 2 3 4 5  下载地址 https://nsq.io/deployment/installing.html wget https://s3.amazonaws.com/bitly-downloads/nsq/nsq-1.2.0.linux-amd64.go1.12.9.tar.gz tar -zxvf nsq-1.2.0.linux-amd64.go1.12.9.tar.gz -C /usr/local/ cd /usr/local mv nsq-1.2.0.linux-amd64.go1.12.9/ nsq-1.2   配置nsqlookupd服务 1 2 3 4 5 6 7 8 9 10 11  vi /usr/lib/systemd/system/nsqlookupd.service [Unit] Description=nsqlookup daemon Service After=network.target remote-fs.target nss-lookup.target [Service] #Type= PrivateTmp=yes ExecStart=/usr/local/nsq-1.2/bin/nsqlookupd Restart=on-abort [Install] WantedBy=multi-user.target   配置nsqd服务 1 2 3 4 5 6 7 8 9 10 11 12  vi /usr/lib/systemd/system/nsqd.service [Unit] Description=nsqd daemon Service After=network.target remote-fs.target nss-lookup.target [Service] #Type= PrivateTmp=yes ExecStart=/usr/local/nsq-1.2/bin/nsqd --lookupd-tcp-address=0.0.0.0:4160 --tcp-address=0.0.0.0:4150 --http-address=0.0.0.0:4151 --broadcast-address=127.0.0.1 #修改broadcast-address Restart=on-abort [Install] WantedBy=multi-user.target   配置nsqadmin服务 1 2 3 4 5 6 7 8 9 10 11  vi /usr/lib/systemd/system/nsqadmin.service [Unit] Description=nsqadmin daemon Service After=network.target remote-fs.target nss-lookup.target [Service] #Type= PrivateTmp=yes ExecStart=/usr/local/nsq-1.2/bin/nsqadmin --lookupd-http-address=127.0.0.1:4161 Restart=on-abort [Install] WantedBy=multi-user.target   启动nsq 1 2 3  systemctl start nsqd systemctl start nsqadmin systemctl start nsqlookupd   ","description":"CentOS7安装NSQ","tags":["centos","go","nsq"],"title":"CentOS7安装NSQ","uri":"/posts/centos7%E5%AE%89%E8%A3%85nsq/"},{"categories":["navicat","工具","激活工具"],"content":"1.安装 打开官网:\nhttps://navicat.com.cn/download/navicat-premium\n2.激活 支持Windows和Mac!\nwindows:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  @echo off echo Delete HKEY_CURRENT_USER\\Software\\PremiumSoft\\NavicatPremium\\Registration[version and language] for /f %%i in ('\"REG QUERY \"HKEY_CURRENT_USER\\Software\\PremiumSoft\\NavicatPremium\" /s | findstr /L Registration\"') do ( reg delete %%i /va /f ) echo. echo Delete Info folder under HKEY_CURRENT_USER\\Software\\Classes\\CLSID for /f %%i in ('\"REG QUERY \"HKEY_CURRENT_USER\\Software\\Classes\\CLSID\" /s | findstr /E Info\"') do ( reg delete %%i /va /f ) echo. echo Finish pause   mac:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  @echo off echo Delete HKEY_CURRENT_USER\\Software\\PremiumSoft\\NavicatPremium\\Registration[version and language] for /f %%i in ('\"REG QUERY \"HKEY_CURRENT_USER\\Software\\PremiumSoft\\NavicatPremium\" /s | findstr /L Registration\"') do ( reg delete %%i /va /f ) echo. echo Delete Info folder under HKEY_CURRENT_USER\\Software\\Classes\\CLSID for /f %%i in ('\"REG QUERY \"HKEY_CURRENT_USER\\Software\\Classes\\CLSID\" /s | findstr /E Info\"') do ( reg delete %%i /va /f ) echo. echo Finish pause   3.其他路子 教师和学生申请！\nhttps://www.navicat.com.cn/sponsorship/education/student\n","description":"Navicat激活","tags":["navicat","工具","激活工具"],"title":"Navicat激活","uri":"/posts/navicat%E6%BF%80%E6%B4%BB/"},{"categories":["wrt","opentwrt"],"content":"  安装编译依赖\n1 2 3 4 5 6 7 8  sudo apt update -y sudo apt full-upgrade -y sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \\ bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \\ git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \\ libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \\ mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip qemu-utils \\ rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev     ","description":"Debian 11环境下OpenWRT自编译过程","tags":["wrt","opentwrt"],"title":"OpenWRT自编译教程","uri":"/posts/openwrt%E7%BC%96%E8%AF%91/"},{"categories":["rocketmq"],"content":"RocketMQ使用者反馈在消息发送过程中偶尔会出现如下错误信息：\n [REJECTREQUEST]system busy, start flow control for a while [PC_SYNCHRONIZED]broker busy, start flow control for a while [PCBUSY_CLEAN_QUEUE]broker busy, start flow control for a while, period in queue: %sms, size of queue: %d too many requests and system thread pool busy, RejectedExecutionException [TIMEOUT_CLEAN_QUEUE]broker busy  原因： 消息发送时抛出system busy、broker busy错误，其本质是系统的PageCache繁忙，通俗一点讲就是向PageCache追加消息时，单个消息发送占用的时间超过1s了。\n  osPageCacheBusyTimeOutMills + broker busy\npagecache压力较大\n判断pagecache是否忙的依据就是在写入消息时，在向内存追加消息时加锁的时间，默认的判断标准是加锁时间超过1s，就认为是pagecache压力大，向客户端抛出相关的错误日志。\n优化: 理论上可以把osPageCacheBusyTimeOutMills的值调大一点，但是不推荐，特别是对时效敏感的系统\n  sendThreadPoolQueueCapacity + system busy\n发送线程池挤压的拒绝策略\n简单说所有到达Broker的请求会被转入到一个线程继续，这个线程的长度由sendThreadPoolQueueCapacity决定，默认长度为10000，超过就报system busy\n优化：理论上可以增加该参数防止报异常，但是不建议，治标不治本\n  brokerFastFailureEnable + broker busy\nBroker端快速失败策略\nbrokerFastFailureEnable默认为true，表示开启快速失败策略\n如果brokerFastFailureEnable=true,当如果发现Broker服务器的PageCache繁忙，如果发现sendThreadPoolQueue队列中不为空，表示还有排队的发送请求在排队等待执行，则直接结束等待，返回broker busy，\n  优化方向： 方向一：   当Broker服务器自身比较忙的时候，快速失败，并且在接下来的一段时间内会规避该Broker，这样该Broker恢复提供了时间保证，Broker本身的架构是支持分布式水平扩容的，增加Topic的队列数，降低单台Broker服务器的负载，从而避免出现PageCache。\n  与之扩容对应的，也可以通过对原有Broker进行升配，例如增加内存、把机械盘换成SSD，但这种情况，通常需要重启Broekr服务器，没有扩容来的方便\n  方向二： 在broker配置文件中将transientStorePoolEnable设置为true。\n  依据： 启用“读写”分离，消息发送时消息先追加到DirectByteBuffer(堆外内存)中，然后在异步刷盘机制下，会将DirectByteBuffer中的内容提交到PageCache，然后刷写到磁盘。消息拉取时，直接从PageCache中拉取，实现了读写分离，减轻了PageCaceh的压力，能从根本上解决该问题。\n  缺点： 会增加数据丢失的可能性，如果Broker JVM进程异常退出，提交到PageCache中的消息是不会丢失的，但存在堆外内存(DirectByteBuffer)中但还未提交到PageCache中的这部分消息，将会丢失。但通常情况下，RocketMQ进程退出的可能性不大。\n  ","description":"RocketMQ使用者反馈在消息发送过程中偶尔会出现如下错误信息","tags":["rocketmq"],"title":"RocketMQ出现system busy、broker busy原因分析与解决","uri":"/posts/rocketmq_1/"}]
